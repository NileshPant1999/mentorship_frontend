{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/nilesh/sparklehood/Sparklhood/frontend/src/components/Founder/nav/pages/Progress.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Spinner, Stack } from \"@chakra-ui/react\";\nimport { Checkbox, CheckboxGroup } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { isAuthenticated } from \"../../../../auth\";\nimport axiosInstance from \"../../../../axios\";\n\nfunction Progress(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [date, setDate] = useState();\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [progress, setProgress] = useState({\n    loading: \"false\",\n    data: null\n  });\n  const [updated, setUpdated] = useState(false);\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const newDate = new Date();\n  const currentNewDate = parseInt(newDate.getDate());\n  const currentMonth = months[newDate.getMonth()];\n  const currentYear = newDate.getFullYear();\n  console.log(currentMonth);\n  useEffect(async () => {\n    try {\n      setIsLoading(true);\n      await axiosInstance.get(`founder/progress/${isAuthenticated().user_id}/`).then(res => {\n        setIsLoading(false);\n        const allProgress = res.data;\n        console.log(\"all\", allProgress);\n        setProgress({\n          load: \"true\",\n          data: allProgress\n        });\n        const date = res.data[0].end_date;\n        const resp = date.split(\"-\");\n        setDate(resp[2]);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [setProgress, updated]);\n\n  const handleSubmit = async e => {\n    setIsLoading(true);\n\n    try {\n      await axiosInstance.post(`founder/add/`, {\n        founder_id: isAuthenticated().user_id,\n        slug: parseInt(Math.random() * 1000000)\n      }).then(res => {\n        setIsLoading(false);\n        setUpdated(!updated);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return progress.loading || isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"60%\",\n      margin: \"30px auto\",\n      height: \"80vh\",\n      textAlign: \"center\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"black\",\n      display: \"flex\",\n      justifyContent: 'space-around'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress__left\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress__right\",\n      children: /*#__PURE__*/_jsxDEV(\"hi\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Progress, \"awF3avPKySQzdZDwIg7vR6btdt4=\");\n\n_c = Progress;\nexport default Progress;\n\nvar _c;\n\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"sources":["/home/nilesh/sparklehood/Sparklhood/frontend/src/components/Founder/nav/pages/Progress.js"],"names":["Button","Spinner","Stack","Checkbox","CheckboxGroup","axios","React","useEffect","useState","isAuthenticated","axiosInstance","Progress","props","isLoading","setIsLoading","date","setDate","startDate","setStartDate","endDate","setEndDate","progress","setProgress","loading","data","updated","setUpdated","months","newDate","Date","currentNewDate","parseInt","getDate","currentMonth","getMonth","currentYear","getFullYear","console","log","get","user_id","then","res","allProgress","load","end_date","resp","split","error","handleSubmit","e","post","founder_id","slug","Math","random","display","width","margin","height","textAlign","justifyContent","alignItems","backgroundColor"],"mappings":"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","sourcesContent":["import { Button, Spinner, Stack } from \"@chakra-ui/react\";\nimport { Checkbox, CheckboxGroup } from \"@chakra-ui/react\";\nimport axios from \"axios\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { isAuthenticated } from \"../../../../auth\";\nimport axiosInstance from \"../../../../axios\";\n\nfunction Progress(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [date, setDate] = useState();\n  const [startDate, setStartDate] = useState()\n  const [endDate, setEndDate] = useState()\n  const [progress, setProgress] = useState({ loading: \"false\", data: null });\n  const [updated, setUpdated] = useState(false);\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const newDate = new Date();\n  const currentNewDate = parseInt(newDate.getDate());\n  const currentMonth = months[newDate.getMonth()]\n  const currentYear = newDate.getFullYear()\n\n  console.log(currentMonth)\n  useEffect(async () => {\n    try {\n      setIsLoading(true);\n      await axiosInstance\n        .get(`founder/progress/${isAuthenticated().user_id}/`)\n        .then((res) => {\n          setIsLoading(false);\n          const allProgress = res.data;\n          console.log(\"all\", allProgress);\n          setProgress({ load: \"true\", data: allProgress });\n          const date = res.data[0].end_date;\n          const resp = date.split(\"-\");\n          setDate(resp[2]);\n        });\n    } catch (error) {\n      console.log(error)\n    }\n   \n  }, [setProgress, updated]);\n\n  const handleSubmit = async (e) => {\n    setIsLoading(true);\n    try {\n      await axiosInstance\n        .post(`founder/add/`, {\n          founder_id: isAuthenticated().user_id,\n          slug: parseInt(Math.random() * 1000000),\n        })\n        .then((res) => {\n          setIsLoading(false);\n          setUpdated(!updated);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return progress.loading || isLoading ? (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"60%\",\n        margin: \"30px auto\",\n        height: \"80vh\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Spinner\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color=\"blue.500\"\n        size=\"xl\"\n      />\n    </div>\n  ) : (\n    <div style={{ backgroundColor: \"black\",display:\"flex\" ,justifyContent:'space-around'}}>\n         <div className='progress__left'>\n           <h1>Hello</h1>\n         </div>\n         <div className='progress__right'> \n         <hi></hi>\n         </div>\n    </div>\n  );\n}\n\nexport default Progress;\n"]},"metadata":{},"sourceType":"module"}