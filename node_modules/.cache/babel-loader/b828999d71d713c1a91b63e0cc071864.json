{"ast":null,"code":"import axios from \"axios\"; //const baseURL = \"https://sparklehood.herokuapp.com/api/\";\n\nconst baseURL = \"http://127.0.0.1:8000/api/\";\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem(\"access_token\") ? \"JWT \" + localStorage.getItem(\"access_token\") : null,\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\"\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === \"undefined\") {\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + \"token/refresh/\") {\n    window.location.href = \"/login/\";\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post(\"/token/refresh/\", {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem(\"access_token\", response.data.access);\n          localStorage.setItem(\"refresh_token\", response.data.refresh);\n          axiosInstance.defaults.headers[\"Authorization\"] = \"JWT \" + response.data.access;\n          originalRequest.headers[\"Authorization\"] = \"JWT \" + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        window.location.href = \"/login/\";\n      }\n    } else {\n      console.log(\"Refresh token not available.\");\n      window.location.href = \"/login/\";\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/home/nilesh/Desktop/Sparklehood-Website/sparklehood_frontend/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err","console","log"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\n//const baseURL = \"https://sparklehood.herokuapp.com/api/\";\nconst baseURL = \"http://127.0.0.1:8000/api/\";\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem(\"access_token\")\n      ? \"JWT \" + localStorage.getItem(\"access_token\")\n      : null,\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\",\n  },\n});\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async function (error) {\n    const originalRequest = error.config;\n\n    if (typeof error.response === \"undefined\") {\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === baseURL + \"token/refresh/\"\n    ) {\n      window.location.href = \"/login/\";\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.data.code === \"token_not_valid\" &&\n      error.response.status === 401 &&\n      error.response.statusText === \"Unauthorized\"\n    ) {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n\n      if (refreshToken) {\n        const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\n\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\n        const now = Math.ceil(Date.now() / 1000);\n\n        if (tokenParts.exp > now) {\n          return axiosInstance\n            .post(\"/token/refresh/\", {\n              refresh: refreshToken,\n            })\n            .then((response) => {\n              localStorage.setItem(\"access_token\", response.data.access);\n              localStorage.setItem(\"refresh_token\", response.data.refresh);\n\n              axiosInstance.defaults.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n              originalRequest.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n\n              return axiosInstance(originalRequest);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        } else {\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\n          window.location.href = \"/login/\";\n        }\n      } else {\n        console.log(\"Refresh token not available.\");\n        window.location.href = \"/login/\";\n      }\n    }\n\n    // specific error handling done elsewhere\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"]},"metadata":{},"sourceType":"module"}